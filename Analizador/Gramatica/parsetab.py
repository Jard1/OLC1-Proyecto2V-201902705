
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftTKN_MASTKN_MENOSleftTKN_PORTKN_DIVTKN_MODleftTKN_POTENCIArightUMENOSleftTKN_IGUAL_IGUALTKN_DIFERENTETKN_MENORTKN_MENORITKN_MAYORTKN_MAYORIrightTKN_NOTleftTKN_ANDleftTKN_ORDECIMAL ENTERO TKN_AND TKN_BOOLEAN TKN_BREAK TKN_CASE TKN_CHAR TKN_COMA TKN_CONTINUE TKN_CORCHETEDER TKN_CORCHETEIZQ TKN_DECREMENTO TKN_DEFAULT TKN_DIFERENTE TKN_DIV TKN_DOSPUNTOS TKN_DOUBLE TKN_ELSE TKN_FALSE TKN_FOR TKN_IF TKN_IGUAL TKN_IGUAL_IGUAL TKN_INCREMENTO TKN_INT TKN_LENGTH TKN_LLAVEDER TKN_LLAVEIZQ TKN_MAIN TKN_MAS TKN_MAYOR TKN_MAYORI TKN_MENOR TKN_MENORI TKN_MENOS TKN_MOD TKN_NEW TKN_NOT TKN_NULL TKN_OR TKN_PARDER TKN_PARIZQ TKN_POR TKN_POTENCIA TKN_PRINT TKN_PTCOMA TKN_PUNTO TKN_READ TKN_RETURN TKN_ROUND TKN_STRING TKN_SWITCH TKN_TOLOWER TKN_TO_UPPER TKN_TRUE TKN_TRUNCATE TKN_TYPE_OF TKN_VOID TKN_WHILE\n    instrucciones : instrucciones instruccion\n                    | instruccion\n    \n    instruccion : TKN_CASE TKN_LLAVEIZQ expresion TKN_LLAVEDER TKN_PTCOMA \n    \n    expresion : expresion TKN_MAS expresion\n            | expresion TKN_MENOS expresion\n            | expresion TKN_POR expresion\n            | expresion TKN_DIV expresion\n    \n    expresion : TKN_MENOS expresion %prec UMENOS\n    \n    expresion : TKN_PARIZQ expresion TKN_PARDER\n    \n    expresion : ENTERO\n            | DECIMAL\n    '
    
_lr_action_items = {'TKN_CASE':([0,1,2,4,18,],[3,3,-2,-1,-3,]),'$end':([1,2,4,18,],[0,-2,-1,-3,]),'TKN_LLAVEIZQ':([3,],[5,]),'TKN_MENOS':([5,6,7,8,9,10,12,13,14,15,16,17,19,20,21,22,23,],[7,13,7,7,-10,-11,7,7,7,7,-8,13,-4,-5,-6,-7,-9,]),'TKN_PARIZQ':([5,7,8,12,13,14,15,],[8,8,8,8,8,8,8,]),'ENTERO':([5,7,8,12,13,14,15,],[9,9,9,9,9,9,9,]),'DECIMAL':([5,7,8,12,13,14,15,],[10,10,10,10,10,10,10,]),'TKN_LLAVEDER':([6,9,10,16,19,20,21,22,23,],[11,-10,-11,-8,-4,-5,-6,-7,-9,]),'TKN_MAS':([6,9,10,16,17,19,20,21,22,23,],[12,-10,-11,-8,12,-4,-5,-6,-7,-9,]),'TKN_POR':([6,9,10,16,17,19,20,21,22,23,],[14,-10,-11,-8,14,14,14,-6,-7,-9,]),'TKN_DIV':([6,9,10,16,17,19,20,21,22,23,],[15,-10,-11,-8,15,15,15,-6,-7,-9,]),'TKN_PARDER':([9,10,16,17,19,20,21,22,23,],[-10,-11,-8,23,-4,-5,-6,-7,-9,]),'TKN_PTCOMA':([11,],[18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'instruccion':([0,1,],[2,4,]),'expresion':([5,7,8,12,13,14,15,],[6,16,17,19,20,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','gramatica.py',174),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','gramatica.py',175),
  ('instruccion -> TKN_CASE TKN_LLAVEIZQ expresion TKN_LLAVEDER TKN_PTCOMA','instruccion',5,'p_instruccion','gramatica.py',180),
  ('expresion -> expresion TKN_MAS expresion','expresion',3,'p_expresion_binaria','gramatica.py',186),
  ('expresion -> expresion TKN_MENOS expresion','expresion',3,'p_expresion_binaria','gramatica.py',187),
  ('expresion -> expresion TKN_POR expresion','expresion',3,'p_expresion_binaria','gramatica.py',188),
  ('expresion -> expresion TKN_DIV expresion','expresion',3,'p_expresion_binaria','gramatica.py',189),
  ('expresion -> TKN_MENOS expresion','expresion',2,'p_expresion_unaria','gramatica.py',198),
  ('expresion -> TKN_PARIZQ expresion TKN_PARDER','expresion',3,'p_expresion_agrupacion','gramatica.py',204),
  ('expresion -> ENTERO','expresion',1,'p_expresion_primitivo','gramatica.py',210),
  ('expresion -> DECIMAL','expresion',1,'p_expresion_primitivo','gramatica.py',211),
]
